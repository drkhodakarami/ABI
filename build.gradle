plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    main {
        resources {
            srcDirs += "src/generated/resources"
            srcDirs += "src/main/resources"
            exclude ".cache"
        }
    }
    // https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
    test {
        compileClasspath += main.output
//        runtimeClasspath += sourceSets.main.output
    }
    datagen {
        compileClasspath += main.output
//        runtimeClasspath += sourceSets.main.output
    }
    generated
    gametest {
        java {
            srcDir "src/gametest/java"
        }
        compileClasspath += main.output
//        runtimeClasspath += sourceSets.main.output
        resources {
            srcDirs += "src/gametest/resources"
        }
    }
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file("run/${it.name}")

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    //source sourceSets.gametest
                }
            }
        }

        client {

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            // Ensure mixin dependencies play nice
            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // https://github.com/ChiefArug/ThermalSysteams/blob/main/build.gradle#L27
            // https://discord.com/channels/313125603924639766/983834532904042537/1089449308048343090
            //jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'


        }

        server {

            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'

            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            //jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id

            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            //jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'
        }

        data {

            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            //jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processGametestResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

//sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    extendConfigurations(implementation, gametestImplementation, testImplementation, datagenImplementation)
    extendConfigurations(compileOnly, gametestCompileOnly, testCompileOnly, datagenCompileOnly)
    extendConfigurations(runtimeOnly, gametestRuntimeOnly, testRuntimeOnly, datagenRuntimeOnly)
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}








repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    //maven {
        // location of the maven that hosts JEI files before January 2023
        //name = "Progwml6's maven"
        //url = "https://dvs1.progwml6.com/files/maven/"
    //}
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
	maven {
        name =" TOP"
        url = "https://maven.k-4u.nl"

    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
	
	implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
            transitive = false
    })
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}